CONFIG_DIR=$(dirname $(realpath -s $BASH_SOURCE))

# Import the variant config if we have one

if [ -n "$VARIANT_CONFIG" ] && [ -f $VARIANT_CONFIG ]
then
  echo "Sourceing variant config $VARIANT_CONFIG..."
  source $VARIANT_CONFIG
fi

# Import the flavor config if we have one

if [ -n "$FLAVOR_CONFIG" ] && [ -f $FLAVOR_CONFIG ]
then
  echo "Sourcing flavor config $FLAVOR_CONFIG..."
  source $FLAVOR_CONFIG
fi

# Import the local config if we have one

if [ -f $CONFIG_DIR/config.local ]
then
  echo "Sourcing config.local..."
  source $CONFIG_DIR/config.local
fi

###############################################################################
# All our config settings must start with FULLPAGEOS_

[ -n "$FULLPAGEOS_SCRIPT_PATH" ] || FULLPAGEOS_SCRIPT_PATH=$CONFIG_DIR
[ -n "$FULLPAGEOS_IMAGE_PATH" ] || FULLPAGEOS_IMAGE_PATH=$FULLPAGEOS_SCRIPT_PATH/image

if [ -f ${FULLPAGEOS_IMAGE_PATH}/raspbian_latest ]; then
  mv ${FULLPAGEOS_IMAGE_PATH}/raspbian_latest ${FULLPAGEOS_IMAGE_PATH}/latest-raspbian.zip
fi

[ -n "$FULLPAGEOS_ZIP_IMG" ] || FULLPAGEOS_ZIP_IMG=$(ls -t ${FULLPAGEOS_IMAGE_PATH}/*-raspbian*.zip | head -n 1)

[ -n "$FULLPAGEOS_WORKSPACE" ] || FULLPAGEOS_WORKSPACE=$FULLPAGEOS_SCRIPT_PATH/workspace$WORKSPACE_POSTFIX
[ -n "$FULLPAGEOS_CHROOT_SCRIPT_PATH" ] || FULLPAGEOS_CHROOT_SCRIPT_PATH=$FULLPAGEOS_SCRIPT_PATH/chroot_script
[ -n "$FULLPAGEOS_MOUNT_PATH" ] || FULLPAGEOS_MOUNT_PATH=$FULLPAGEOS_WORKSPACE/mount

# if set will enlarge root parition prior to build by provided size in MB
[ -n "$FULLPAGEOS_IMAGE_ENLARGEROOT" ] || FULLPAGEOS_IMAGE_ENLARGEROOT=1000

# if set will resize root partition on image after build to minimum size +
# provided size in MB
[ -n "$FULLPAGEOS_IMAGE_RESIZEROOT" ] || FULLPAGEOS_IMAGE_RESIZEROOT=200

# a local directory on the build server to bind mount under /var/cache/apt
[ -n "$FULLPAGEOS_APT_CACHE" ] || FULLPAGEOS_APT_CACHE=$FULLPAGEOS_WORKSPACE/aptcache

# a host:port combo for a apt-proxy (such as apt-cacher-ng) to use
[ -n "$FULLPAGEOS_APT_PROXY" ] || FULLPAGEOS_APT_PROXY=

# an alternative pypi index url to use, e.g. a proxy such as devpi
[ -n "$FULLPAGEOS_PYPI_INDEX" ] || FULLPAGEOS_PYPI_INDEX=

[ -n "$FULLPAGEOS_OVERRIDE_HOSTNAME" ] || FULLPAGEOS_OVERRIDE_HOSTNAME=fullpageos

#override timezone, otherwise use image timezone
[ -n "$FULLPAGEOS_OVERRIDE_TIMEZONE" ] || FULLPAGEOS_OVERRIDE_TIMEZONE=default

#override locale, otherwise use image locale
[ -n "$FULLPAGEOS_OVERRIDE_LOCALE" ] || FULLPAGEOS_OVERRIDE_LOCALE=default

#override password, otherwise use image default
[ -n "$FULLPAGEOS_OVERRIDE_PASSWORD" ] || FULLPAGEOS_OVERRIDE_PASSWORD=default

[ -n "$FULLPAGEOS_INCLUDE_CHROMIUM" ] || FULLPAGEOS_INCLUDE_CHROMIUM=yes
[ -n "$FULLPAGEOS_INCLUDE_LIGHTTPD" ] || FULLPAGEOS_INCLUDE_LIGHTTPD=yes

# FullPageDashboard repo & branch
[ -n "$FULLPAGEOS_DASHBOARD_REPO_SHIP" ] || FULLPAGEOS_DASHBOARD_REPO_SHIP=https://github.com/amitdar/FullPageDashboard.git
[ -n "$FULLPAGEOS_DASHBOARD_REPO_BUILD" ] || FULLPAGEOS_DASHBOARD_REPO_BUILD=
[ -n "$FULLPAGEOS_DASHBOARD_REPO_BRANCH" ] || FULLPAGEOS_DASHBOARD_REPO_BRANCH=master
[ -n "$FULLPAGEOS_INCLUDE_DASHBOARD" ] || FULLPAGEOS_INCLUDE_DASHBOARD=yes

# FullPageDashboard repo & branch
[ -n "$FULLPAGEOS_WELCOME_REPO_SHIP" ] || FULLPAGEOS_WELCOME_REPO_SHIP=https://github.com/tailorvj/FullPageOSWelcome.git
[ -n "$FULLPAGEOS_WELCOME_REPO_BUILD" ] || FULLPAGEOS_WELCOME_REPO_BUILD=
[ -n "$FULLPAGEOS_WELCOME_REPO_BRANCH" ] || FULLPAGEOS_WELCOME_REPO_BRANCH=master
[ -n "$FULLPAGEOS_INCLUDE_WELCOME" ] || FULLPAGEOS_INCLUDE_WELCOME=yes

# Add GPU acceleration
[ -n "$FULLPAGEOS_INCLUDE_ACCELERATION" ] || FULLPAGEOS_INCLUDE_ACCELERATION=yes


###############################################################################
# Rewrite any build urls that are not yet set if we have a repository mirror
# configured.

if [ -n "$FULLPAGEOS_BUILD_REPO_MIRROR" ]
then
	vars=`compgen -A variable | grep '^FULLPAGEOS_' | grep 'REPO_BUILD'`
	for var in $vars
	do
		if [ ! -n "${!var}" ]
		then
			repo_ship_var=${var%_BUILD}_SHIP
			original=${!repo_ship_var}
			rewritten=$FULLPAGEOS_BUILD_REPO_MIRROR`echo $original | awk -F '/' '{print $(NF)}'`

			echo "Rewriting build repo for $var from $original to $rewritten"
			eval $var=$rewritten
		fi
	done
fi

###############################################################################
# Print and export the final configuration.

echo "================================================================"
echo "Using the following config:"

vars=`compgen -A variable | grep '^FULLPAGEOS_'`
for var in $vars
do
	echo "$var = ${!var}"
	eval export $var
done

echo "================================================================"
